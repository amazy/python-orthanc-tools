import pathlib
import subprocess
import unittest, os, glob
import hl7  # https://python-hl7.readthedocs.org/en/latest/
import pydicom
from orthanc_tools import MLLPClient, Hl7MessageValidator, MLLPServer, Hl7ReportParser, ReportSeriesBuilder, Hl7OruReportMsgHandler
import tempfile
import logging
from orthanc_api_client import OrthancApiClient

here = pathlib.Path(__file__).parent.resolve().parent.resolve().parent.resolve().parent.resolve()


class TestHl7OruReportMsgHandler(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        subprocess.run(["docker", "compose", "down", "-v"], cwd=here/"tests/docker-setup")
        subprocess.run(["docker", "compose", "up", "-d"], cwd=here/"tests/docker-setup")

        cls.oa = OrthancApiClient('http://localhost:10042', user='test', pwd='test')
        cls.oa.wait_started()

    @classmethod
    def tearDownClass(cls):
        subprocess.run(["docker", "compose", "down", "-v"], cwd=here/"tests/docker-setup")

    def test_ried_reports(self):

        # upload the study we will attach the pdf to
        original_instance_id = self.oa.upload_file(here / "tests/stimuli/CT_small.dcm")[0]
        original_study_id = self.oa.instances.get_parent_study_id(original_instance_id)

        port_number = 2001  # there are currently some issues when trying to reuse the same port in 2 tests (it's probably not freed soon enough -> let's use another port for each test)

        parser = Hl7ReportParser()
        orthanc_client = OrthancApiClient('http://localhost:10042', user='test', pwd='test')
        builder = ReportSeriesBuilder(orthanc_client, "Protocole")

        oru_handler = Hl7OruReportMsgHandler(parser=parser, builder=builder)

        mllp_server = MLLPServer(
            host='localhost',
            port=port_number,
            handlers={
                'ORU^R01^ORU_R01': (oru_handler.handle_oru_message,)
            }
        )

        with mllp_server as server:
            # validate that ORU messages do create new series with embedded pdf
            with MLLPClient('localhost', port_number) as client:
                hl7_request = hl7.parse(
                    "\x0bMSH|^~\&|CHLC_CR|CHLC_CR|HM_2792|HM_2792|20210412151547||ORU^R01^ORU_R01|1932e882-d525-4735-98a7-3882daed5866|P|2.5|||||FRA|8859/1\r"
                    "PID|1||00007130^^^GAP&^PI~P379.241588^^^ECSIMAGING^PI||LEnnn^Lpppp^^^^^D~LEnnn^Lpppp^^^^^L||19710101010000|F||||||||M|||||||||||||N\r"
                    "PV1||E||R||||||||||1|||||001191473|||||||||||||||||||||||||20210412162300|\r"
                    "OBR|||1.3.6.1.4.1.5962.1.2.1.20040119072730.12322^ECSIMAGING|TX^THORAX^ECS|||20210412171505|||||||||579^URGENCES^Ch Le Cateau^^^^^^CHLC_CR^L^^^EI||A312.114589725||1041314||||||||||||10002226354^DESMETTRE ^Claude^^^^^^ASIP-SANTE-PS&1.2.250.1.71.4.2.1&ISO^L^^^RPPS|||||||||||||||1^Cabinet le Cateau-Cambresis^ECSIMAGING|\r"
                    "OBX|1|ED|18748-4^THORAX^ECSIMAGING||^Application^PDF^Base64^||||||F|||20210412171505\r"
                    "ZDS|1.3.6.1.4.1.5962.1.2.1.20040119072730.12322^ECSIMAGING^Application^DICOM\r"
                    "\x1c\x0d"
                )
                response = client.send(hl7_request)
                hl7_response = hl7.parse(response)

            # make sure the created pdf is the same as the original
            pdf_instance_id = self.oa.studies.get_pdf_instances(original_study_id)[0]
            with tempfile.NamedTemporaryFile() as f:
                self.oa.instances.download_pdf(pdf_instance_id, f.name)
                new_pdf_file_content = f.read()
            with open(here / "tests/stimuli/sample.pdf", 'rb') as f1:
                original_pdf_file_content = f1.read()
            self.assertEqual(new_pdf_file_content, original_pdf_file_content)

            # make sure the hl7 response contains the "AA" (meaning "message well processed")
            self.assertEqual(hl7_response['MSA.F1.R1'],"AA")

    def test_ried_invalid_reports(self):
        """
        This is almost the same tests as the previous one, but the string containing base64 encoded pdf
        has been modified to be invalid, so the server should return an error
        """

        # upload the study we will attach the pdf to
        original_instance_id = self.oa.upload_file(here / "tests/stimuli/CT_small.dcm")[0]
        original_study_id = self.oa.instances.get_parent_study_id(original_instance_id)

        port_number = 2001  # there are currently some issues when trying to reuse the same port in 2 tests (it's probably not freed soon enough -> let's use another port for each test)

        parser = Hl7ReportParser()
        orthanc_client = OrthancApiClient('http://localhost:10042', user='test', pwd='test')
        builder = ReportSeriesBuilder(orthanc_client, "Protocole")

        oru_handler = Hl7OruReportMsgHandler(parser=parser, builder=builder)

        mllp_server = MLLPServer(
            host='localhost',
            port=port_number,
            handlers={
                'ORU^R01^ORU_R01': (oru_handler.handle_oru_message,)
            }
        )

        with mllp_server as server:
            # validate that ORU messages do create new series with embedded pdf
            with MLLPClient('localhost', port_number) as client:
                hl7_request = hl7.parse(
                    "\x0bMSH|^~\&|CHLC_CR|CHLC_CR|HM_2792|HM_2792|20210412151547||ORU^R01^ORU_R01|1932e882-d525-4735-98a7-3882daed5866|P|2.5|||||FRA|8859/1\r"
                    "PID|1||00007130^^^GAP&^PI~P379.241588^^^ECSIMAGING^PI||LEnnn^Lpppp^^^^^D~LEnnn^Lpppp^^^^^L||19710101010000|F||||||||M|||||||||||||N\r"
                    "PV1||E||R||||||||||1|||||001191473|||||||||||||||||||||||||20210412162300|\r"
                    "OBR|||1.3.6.1.4.1.5962.1.2.1.20040119072730.12322^ECSIMAGING|TX^THORAX^ECS|||20210412171505|||||||||579^URGENCES^Ch Le Cateau^^^^^^CHLC_CR^L^^^EI||A312.114589725||1041314||||||||||||10002226354^DESMETTRE ^Claude^^^^^^ASIP-SANTE-PS&1.2.250.1.71.4.2.1&ISO^L^^^RPPS|||||||||||||||1^Cabinet le Cateau-Cambresis^ECSIMAGING|\r"
                    "OBX|1|ED|18748-4^THORAX^ECSIMAGING||^Application^PDF^Base64^||||||F|||20210412171505\r"
                    "ZDS|1.3.6.1.4.1.5962.1.2.1.20040119072730.12322^ECSIMAGING^Application^DICOM\r"
                    "\x1c\x0d"
                )
                response = client.send(hl7_request)
                hl7_response = hl7.parse(response)

            # make sure the hl7 response contains the "AA" (meaning "message well processed")
            self.assertEqual(hl7_response['MSA.F1.R1'],"AE")